"""
贪心算法：

老师想给孩子们分发糖果，有 N个孩子站成了一条直线，老师会根据每个孩子的表现，预先给他们评分。

你需要按照以下要求，帮助老师给这些孩子分发糖果：

每个孩子至少分配到 1 个糖果。
评分更高的孩子必须比他两侧的邻位孩子获得更多的糖果。
那么这样下来，老师至少需要准备多少颗糖果呢？


示例1：

输入：[1,0,2]
输出：5
解释：你可以分别给这三个孩子分发 2、1、2 颗糖果。
示例2：

输入：[1,2,2]
输出：4
解释：你可以分别给这三个孩子分发 1、2、1 颗糖果。
     第三个孩子只得到 1 颗糖果，这已满足上述两个条件。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/candy
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
"""

class Solution(object):
    def candy(self, ratings):
        """
        孩子的评分排列是一个峰峦状的图表，有山谷和山峰，山谷的孩子一定是拿1个糖果，山峰孩子一定拿当前山峰的最大糖果数，
        从左往右递增时，右边个孩子一定比左边的孩子多，则每次递增时，糖果数+1。
        从右往左递增时，左边个孩子一定比右边的孩子多，同上，在山峰交叉时，求最大值。
        注：题目中如果如果相邻评分相同不受 "评分更高的孩子必须比他两侧的邻位孩子获得更多的糖果"，的限制，中间的部分可以为1
        :type ratings: List[int]
        :rtype: int
        """
        # 每个孩子可以分的糖果数
        cl = [1] * len(ratings)
        for i in range(1, len(ratings)):
            if ratings[i] > ratings[i-1]:
                cl[i] = cl[i-1] + 1
        for i in range(len(ratings)-1, 0, -1):
            if ratings[i-1] > ratings[i]:
                cl[i-1] = max(cl[i] + 1, cl[i-1])
        # 糖果总数
        c = 0
        for n in cl:
            c += n
        return c


if __name__ == "__main__":
    print(Solution().candy([1,0,2]))